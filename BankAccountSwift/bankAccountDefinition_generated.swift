// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all

import FlatBuffers

public enum status: Int8, Enum { 
    public typealias T = Int8
    public static var byteSize: Int { return MemoryLayout<Int8>.size }
    public var value: Int8 { return self.rawValue }
    case open_ = 0
    case closed = 1
    case frozen = 2
    

    public static var max: status { return .frozen }
    public static var min: status { return .open_ }
}

public struct account: FlatBufferObject {

    static func validateVersion() { FlatBuffersVersion_1_12_0() }
    public var __buffer: ByteBuffer! { return _accessor.bb }
    private var _accessor: Table

    public static func getRootAsaccount(bb: ByteBuffer) -> account { return account(Table(bb: bb, position: Int32(bb.read(def: UOffset.self, position: bb.reader)) + Int32(bb.reader))) }

    private init(_ t: Table) { _accessor = t }
    public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

    private enum VTOFFSET: VOffset {
        case accountId = 4
        case balance = 6
        case interestRate = 8
        case accountStatus = 10
        var v: Int32 { Int32(self.rawValue) }
        var p: VOffset { self.rawValue }
    }

    public var accountId: Int16 { let o = _accessor.offset(VTOFFSET.accountId.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int16.self, at: o) }
    public var balance: Float32 { let o = _accessor.offset(VTOFFSET.balance.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
    public var interestRate: Double { let o = _accessor.offset(VTOFFSET.interestRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
    public var accountStatus: status { let o = _accessor.offset(VTOFFSET.accountStatus.v); return o == 0 ? .open_ : status(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .open_ }
    public static func startaccount(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
    public static func add(accountId: Int16, _ fbb: inout FlatBufferBuilder) { fbb.add(element: accountId, def: 0, at: VTOFFSET.accountId.p) }
    public static func add(balance: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: balance, def: 0.0, at: VTOFFSET.balance.p) }
    public static func add(interestRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: interestRate, def: 0.0, at: VTOFFSET.interestRate.p) }
    public static func add(accountStatus: status, _ fbb: inout FlatBufferBuilder) { fbb.add(element: accountStatus.rawValue, def: 0, at: VTOFFSET.accountStatus.p) }
    public static func endaccount(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset<UOffset> { let end = Offset<UOffset>(offset: fbb.endTable(at: start)); return end }
    public static func createaccount(
        _ fbb: inout FlatBufferBuilder,
        accountId: Int16 = 0,
        balance: Float32 = 0.0,
        interestRate: Double = 0.0,
        accountStatus: status = .open_
    ) -> Offset<UOffset> {
        let __start = account.startaccount(&fbb)
        account.add(accountId: accountId, &fbb)
        account.add(balance: balance, &fbb)
        account.add(interestRate: interestRate, &fbb)
        account.add(accountStatus: accountStatus, &fbb)
        return account.endaccount(&fbb, start: __start)
    }
}

public struct accountInformation: FlatBufferObject {

    static func validateVersion() { FlatBuffersVersion_1_12_0() }
    public var __buffer: ByteBuffer! { return _accessor.bb }
    private var _accessor: Table

    public static func getRootAsaccountInformation(bb: ByteBuffer) -> accountInformation { return accountInformation(Table(bb: bb, position: Int32(bb.read(def: UOffset.self, position: bb.reader)) + Int32(bb.reader))) }

    private init(_ t: Table) { _accessor = t }
    public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

    private enum VTOFFSET: VOffset {
        case owner = 4
        case platinumRewards = 6
        case accounts = 8
        var v: Int32 { Int32(self.rawValue) }
        var p: VOffset { self.rawValue }
    }

    public var owner: String? { let o = _accessor.offset(VTOFFSET.owner.v); return o == 0 ? nil : _accessor.string(at: o) }
    public var ownerSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.owner.v) }
    public var platinumRewards: Bool { let o = _accessor.offset(VTOFFSET.platinumRewards.v); return o == 0 ? false : 0 != _accessor.readBuffer(of: Byte.self, at: o) }
    public var accountsCount: Int32 { let o = _accessor.offset(VTOFFSET.accounts.v); return o == 0 ? 0 : _accessor.vector(count: o) }
    public func accounts(at index: Int32) -> account? { let o = _accessor.offset(VTOFFSET.accounts.v); return o == 0 ? nil : account(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
    public static func startaccountInformation(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
    public static func add(owner: Offset<String>, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: owner, at: VTOFFSET.owner.p) }
    public static func add(platinumRewards: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: platinumRewards, def: false,
     at: VTOFFSET.platinumRewards.p) }
    public static func addVectorOf(accounts: Offset<UOffset>, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: accounts, at: VTOFFSET.accounts.p) }
    public static func endaccountInformation(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset<UOffset> { let end = Offset<UOffset>(offset: fbb.endTable(at: start)); return end }
    public static func createaccountInformation(
        _ fbb: inout FlatBufferBuilder,
        offsetOfOwner owner: Offset<String> = Offset(),
        platinumRewards: Bool = false,
        vectorOfAccounts accounts: Offset<UOffset> = Offset()
    ) -> Offset<UOffset> {
        let __start = accountInformation.startaccountInformation(&fbb)
        accountInformation.add(owner: owner, &fbb)
        accountInformation.add(platinumRewards: platinumRewards, &fbb)
        accountInformation.addVectorOf(accounts: accounts, &fbb)
        return accountInformation.endaccountInformation(&fbb, start: __start)
    }
}

